name: Java Maven CI Reusable Workflow

on:
  workflow_call:
    inputs:
      repo-url:
        description: 'Repository to checkout (owner/repo format)'
        required: true
        type: string
      build-command:
        description: 'Command to build the project'
        required: false
        type: string
        default: 'mvn clean package -DskipTests'
      test-command:
        description: 'Command to test the project'
        required: false
        type: string
        default: 'mvn test'
      container-image:
        description: 'Container image name (e.g., ghcr.io/your-org/your-app)'
        required: true
        type: string

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository using the provided URL.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo-url }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Set up JDK 17.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Lint Project 
        run: mvn checkstyle:check
      - name: Generate Checkstyle Report
        run: mvn checkstyle:checkstyle

      # 3. Build the project using the provided build command.
      - name: Build with Maven
        run: ${{ inputs.build-command }}

      # 4. Run tests using the provided test command.
      - name: Run Maven Tests
        run: ${{ inputs.test-command }}

      # 5. Extract the Maven project version for tagging.
      - name: Get project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Project version: $VERSION"

      # 6. Log in to GitHub Container Registry.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Build Docker image (do not push yet) with tag using the project version.
      - name: List repo
        run: ls -la
      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: false
          tags: ${{ inputs.container-image }}:${{ env.VERSION }}

      # 8. Push Docker image to GitHub Container Registry.
      - name: Push Docker Image
        run: docker push ${{ inputs.container-image }}:${{ env.VERSION }}
